// Generated by https://quicktype.io

export interface WantedResponse {
    links: Links;
    data: Job[];
    is_callable_external_job: boolean;
    is_score: boolean;
    model_status: boolean | null;
    data_model: 'CFAIScore' | null;
}

interface Links {
    prev: string | null;
    next: string | null;
}

interface Job {
    status: Status;
    company: Company;
    title_img: Img;
    logo_img: Img;
    compare_country: boolean;
    due_time: string | null;
    like_count: number;
    id: number;
    address: AddressSimple;
    category_tags: CategoryTag[];
    reward: Reward;
    is_like: boolean;
    is_bookmark: boolean;
    matching_score: MatchingScore | null;
    position: string;
    score: number | null;
}

enum Status {
    Active = 'active',
    Inactive = 'draft',
}

interface AddressSimple {
    country: Countries['display'];
    location: LocationFilter['display'];
}

interface CategoryTag {
    parent_id: number;
    id: number;
}

interface Company {
    id: number;
    industry_name: IndustryName;
    application_response_stats: ApplicationResponseStats;
    name: string;
}

enum IndustryName {
    IT컨텐츠 = 'IT, 컨텐츠',
    교육 = '교육',
    금융 = '금융',
    기타서비스업 = '기타 서비스업',
}

interface Reward {
    formatted_total: FormattedTotal;
    formatted_recommender: FormattedRecommend;
    formatted_recommendee: FormattedRecommend;
}

enum FormattedRecommend {
    The500000원 = '500,000원',
}

enum FormattedTotal {
    The1000000원 = '1,000,000원',
}

interface ApplicationResponseStats {
    avg_rate: number;
    level: Level;
    delayed_count: number;
    avg_day: number | null;
    remained_count: number;
    type: Type;
}

export enum Level {
    AboveAverage = 'aboveAverage', // 0.51-0.7
    High = 'high', // 0.71-0.85
    VeryHigh = 'very_high', // 0.86-0.99
}

export enum Type {
    AppliedReplyDone = 'applied_reply_done',
}

interface Img {
    origin: string;
    thumb: string;
}

export interface WantedJobDetail {
    job: DescribeJob;
    application: Application | null;
    like_users: LikeUser[];
}

export interface Application {
    status: number;
    name: string;
    mobile: string;
    id: number;
    resume_ok: boolean;
    status_text: StatusText;
    email: string;
}

export enum StatusText {
    최종합격 = 'hire',
    지원완료 = 'complete',
    불합격 = 'reject',
    지원서작성중 = 'write',
    서류통과 = 'pass',
    전체 = 'total',
}

export interface LikeUser {
    id: number;
    name: string;
    avatar: string;
}

interface DescribeJob {
    address: Address;
    like_count: number;
    id: number;
    detail: Detail;
    company_images: CompanyImage[];
    skill_tags: Tag[];
    status: string;
    company: Company;
    logo_img: Img;
    company_tags: CompanyTag[];
    title_img: Img;
    position: string;
    category_tags: CategoryTag[];
    is_crossboarder: boolean;
    is_like: boolean;
    due_time: string | null;
    score: number;
    is_bookmark: boolean;
    is_company_follow: boolean;
    compare_country: boolean;
    matching_score: MatchingScore;
    short_link: string | null;
    reward: Reward;
}

interface Address {
    country: string;
    full_location: string;
    geo_location: GeoLocation;
    location: string;
    country_code: string;
}

interface GeoLocation {
    n_location: NLocation;
    location: Coordinates;
    location_type: string;
    bounds: string | null;
    viewport: Viewport;
}

interface Coordinates {
    lat: number;
    lng: number;
}

interface NLocation {
    lat: number;
    lng: number;
    address: string;
}

interface Viewport {
    northeast: Coordinates;
    southwest: Coordinates;
}

interface CompanyImage {
    url: string;
    id: number;
}

interface Tag {
    title: string;
    id: number;
    kind_title: string;
}

interface MatchingScore {
    resume_id: number;
    model_version: number;
    score: number;
    wd_id: number;
    id: number;
}

interface Detail {
    requirements: string;
    main_tasks: string;
    intro: string;
    benefits: string;
    preferred_points: string;
}

export interface CompanyTag {
    title: string;
    id: number;
    kind_title: KindTitle;
}

enum KindTitle {
    CompanyManagement = 'COMPANY_MANAGEMENT',
    NewIndustry = 'NEW_INDUSTRY',
}

export type Position =
    | '개발 전체'
    | '.NET 개발자'
    | 'BI 엔지니어'
    | 'C,C++ 개발자'
    | 'CIO,Chief Information Officer'
    | 'CTO,Chief Technology Officer'
    | 'DBA'
    | 'DevOps / 시스템 관리자'
    | 'ERP전문가'
    | 'Node.js 개발자'
    | 'PHP 개발자'
    | 'QA,테스트 엔지니어'
    | 'VR 엔지니어'
    | 'iOS 개발자'
    | '개발 매니저'
    | '그래픽스 엔지니어'
    | '기술지원'
    | '데이터 사이언티스트'
    | '데이터 엔지니어'
    | '루비온레일즈 개발자'
    | '머신러닝 엔지니어'
    | '보안 엔지니어'
    | '블록체인 플랫폼 엔지니어'
    | '빅데이터 엔지니어'
    | '서버 개발자'
    | '소프트웨어 엔지니어'
    | '시스템,네트워크 관리자'
    | '안드로이드 개발자'
    | '영상,음성 엔지니어'
    | '웹 개발자'
    | '웹 퍼블리셔'
    | '임베디드 개발자'
    | '자바 개발자'
    | '크로스플랫폼 앱 개발자'
    | '파이썬 개발자'
    | '프로덕트 매니저'
    | '프론트엔드 개발자'
    | '하드웨어 엔지니어';

export type Language =
    | 'AWS'
    | 'Android'
    | 'C / C++'
    | 'C++'
    | 'Docker'
    | 'Git'
    | 'Github'
    | 'HTML'
    | 'JPA'
    | 'JavaScript'
    | 'Kotlin'
    | 'Linux'
    | 'MySQL'
    | 'PHP'
    | 'Python'
    | 'React'
    | 'SQL'
    | 'Spring Framework'
    | 'Swift'
    | 'iOS';

export interface Filters {
    job_sort: Record<string, JobSort>;
    company_tags: CompanyFilter[];
    employee_count: Tags[];
    years: Record<string, Year>;
    countries: Countries[];
    sub_tags?: Tags[];
    languages: Record<Language, number>;
    positions: Record<Position, number>;
}

export interface Tags {
    key: string | number;
    display: string;
}

export type CompanyFilter = Tags & {
    sub_tags: Tags[];
};

export type LocationFilter = Tags & {
    districts?: LocationFilter[];
};

export type Countries = {
    key: 'all' | 'kr' | 'tw' | 'sg' | 'jp' | 'others';
    display: '전세계' | '한국' | '대만' | '싱가폴' | '일본' | '기타';
    locations: LocationFilter[];
};

export type JobSort = 'company.response_rate_order' | 'job.latest_order' | 'job.compensation_order' | 'job.popularity_order';

const TEN = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as const;

export type Year = (typeof TEN)[number];
